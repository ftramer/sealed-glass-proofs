#include "http_parser.h"
#include "assert.h"
#include "string.h"
#include "simple_parser.h"
#include <ctype.h>
#include <stdio.h>

using namespace proxygen;

int
request_path_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  assert(len < MAX_ELEMENT_SIZE);
  message* msg = (message*) parser->data;
  strncat(msg->request_path, p, len);
  return 0;
}

int
request_url_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  assert(len < MAX_ELEMENT_SIZE);

  message* msg = (message*) parser->data;
  strncat(msg->request_uri, p, len);
  return 0;
}

int
header_field_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  assert(len < MAX_ELEMENT_SIZE);
  message* msg = (message*) parser->data;

  assert(msg->num_headers < MAX_HEADERS);

  if (msg->last_header_element != FIELD)
    msg->num_headers++;

  strncat(msg->headers[msg->num_headers-1][0], p, len);

  msg->last_header_element = FIELD;

  return 0;
}

int
header_value_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  assert(len < MAX_ELEMENT_SIZE);

  message* msg = (message*) parser->data;

  strncat(msg->headers[msg->num_headers-1][1], p, len);

  msg->last_header_element = VALUE;

  return 0;
}

int
body_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  assert(len < MAX_ELEMENT_SIZE);

  message* msg = (message*) parser->data;
  strncat(msg->body, p, len);

  return 0;
}

int
message_complete_cb (http_parser *parser)
{
  message* msg = (message*) parser->data;
  msg->method = parser->method;
  msg->status_code = parser->status_code;

  msg->message_complete_cb_called = 1;

  return 0;
}

int
message_begin_cb (http_parser *parser)
{
  assert(parser);
  message* msg = (message*) parser->data;
  msg->message_begin_cb_called = 1;
  return 0;
}

int
headers_complete_cb (http_parser *parser, const char *p, size_t len)
{
  assert(parser);
  message* msg = (message*) parser->data;
  msg->headers_complete_cb_called = 1;
  return 0;
}

void parser_init (http_parser* parser, http_parser_settings* settings) {
	http_parser_init(parser, HTTP_REQUEST);

	settings->on_message_begin     = message_begin_cb;
	settings->on_header_field      = header_field_cb;
	settings->on_header_value      = header_value_cb;
	settings->on_url               = request_url_cb;
	settings->on_body              = body_cb;
	settings->on_headers_complete  = headers_complete_cb;
	settings->on_message_complete  = message_complete_cb;
}